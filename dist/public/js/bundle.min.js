(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _SketchFab = require('./modules/SketchFab');

var _Functions = require('./modules/Functions');

var urlid = [],
    models = [];

$(".url").each(function (index) {
  urlid[index] = $(this).text();
});

for (var x = 0; x < urlid.length; x++) {
  models[x] = new _SketchFab.SketchfabModel(urlid[x]);
}(0, _Functions.styles)(urlid.length);

},{"./modules/Functions":2,"./modules/SketchFab":3}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.styles = styles;
exports.test = test;
var h = window.innerHeight,
    totalSections = 0;

function styles(iframes) {
	if (iframes == 1) $("#iframe" + iframes).addClass("onlyModel");else {
		//define the old parent
		var oldParent = document.getElementById('sketchContainer');
		var wrapper = void 0;
		var firstIframe = document.getElementById('iframe1');
		for (var x = 1; x < iframes + 1; x++) {
			$("#iframe" + x).addClass("twinModel");
			var oldChild = document.getElementById('iframe' + x);
			if (isOdd(x)) {
				totalSections++;
				wrapper = document.createElement('section');
				wrapper.setAttribute("id", 'section' + totalSections);
				oldParent.appendChild(wrapper);
				// $( "#iframe"+x ).addClass( "headerModel" );
			}
			wrapper.appendChild(oldChild);

			if (isOdd(iframes)) {}
			// $( "#iframe2" ).addClass( "twinModel" );


			//PUSH 2ND IFRAME TO NEXT SECTION

			resizeStyles();
		}
	}
}

function resizeStyles() {
	h = window.innerHeight;
	$("section").height(h / totalSections);
}
function isOdd(num) {
	return num % 2;
}

$(window).resize(resizeStyles);

var sqrt = exports.sqrt = Math.sqrt;
function test(x, y) {
	return sqrt(square(x) + square(y));
}

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SketchfabModel = exports.SketchfabModel = function () {
	function SketchfabModel(urlid) {
		_classCallCheck(this, SketchfabModel);

		var version = '1.0.0';
		this.api = null;
		self = this;
		this.client = new Sketchfab(version, this.createIframe());
		this.requestSketchfabModel(urlid);
	}

	_createClass(SketchfabModel, [{
		key: "createIframe",
		value: function createIframe() {
			var totalIframes = document.getElementsByTagName("iframe").length + 1;
			var iframeID = "iframe" + totalIframes;
			var iframe = document.createElement("iframe");
			iframe.setAttribute("id", iframeID);
			$("#sketchContainer").append(iframe);
			return iframe;
		}
	}, {
		key: "requestSketchfabModel",
		value: function requestSketchfabModel(urlid) {
			self.api = urlid;
			this.client.init(urlid, {
				success: function onSuccess(api) {
					self.api = api;
					api.start();
					api.addEventListener('viewerready', function () {
						// API is ready to use
						// Insert your code here
						console.log('Viewer is ready');
					});
				},
				error: function onError() {
					console.log('Viewer error');
				}
			});
		}
	}, {
		key: "startAPI",
		value: function startAPI() {
			console.log(self.api);
			self.api.start();
		}
	}]);

	return SketchfabModel;
}();

},{}]},{},[1]);
